generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum userLevel {
  STANDARD
  ADMIN
  TRIAL
  FREE
  PREMIUM
}

model Users {
  uid       String  @id()
  email     String  @unique
  username  String?
  firstName String?
  lastName  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?

  userLevel userLevel @default(STANDARD)

  answers Answers[]

  totalDailyStreak   Int? @default(0)
  correctDailyStreak Int? @default(0)

  userProfilePicture String?

  showTimeTaken Boolean @default(false)

  subscription Subscriptions?
}

model Subscriptions {
  uid           String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userUid       String    @unique
  user          Users     @relation(fields: [userUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  startDate     DateTime?
  endDate       DateTime?
  active        Boolean   @default(true)
  planId        String
  productId     String
  planTrial     Boolean   @default(false)
  planTrialDays Int?

  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionItemId String?
}

model Questions {
  uid          String   @id @default(cuid())
  question     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  questionDate String

  answers       QuestionAnswers[]
  correctAnswer String

  userAnswers    Answers[]
  answerResource String?

  codeSnippet String?

  hint String?

  dailyQuestion Boolean @default(false)

  tags QuestionTags[]
}

model Tag {
  uid       String         @id @default(uuid())
  name      String         @unique
  questions QuestionTags[]
}

// Junction table for the many-to-many relationship between Questions and Tags
model QuestionTags {
  question   Questions @relation(fields: [questionId], references: [uid], onDelete: Cascade)
  questionId String
  tag        Tag       @relation(fields: [tagId], references: [uid], onDelete: Cascade)
  tagId      String

  @@id([questionId, tagId])
  @@index([tagId])
  @@index([questionId])
}

model QuestionAnswers {
  uid         String    @id @default(cuid())
  questionUid String
  question    Questions @relation(fields: [questionUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  answer      String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Answers {
  uid           String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  userUid       String    @default("legacy_user")
  questionUid   String    @default("legacy_question")
  user          Users     @relation(fields: [userUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  question      Questions @relation(fields: [questionUid], references: [uid], onDelete: Cascade, onUpdate: Cascade)
  userAnswerUid String
  correctAnswer Boolean   @default(false)
  questionDate  String    @default("")
  timeTaken     Int?
}
