'use server';
import { prisma } from '@/lib/prisma';
import { Questions } from '@prisma/client';
import Anthropic from '@anthropic-ai/sdk';

// scripts used to add slug data to the questions.
// its not the most optimized script, but it works :)
export const addSlugFlagToQuestion = async () => {
  // only apply to question that have a slug and are not custom questions
  await prisma.questions.updateMany({
    where: {
      slug: {
        not: null,
      },
      AND: {
        customQuestion: false,
      },
    },
    data: {
      slugGenerated: true,
    },
  });
};

export const addSlugToQuestion = async () => {
  // fetch all questions that need slugs
  const questions = await prisma.questions.findMany({
    where: {
      customQuestion: false,
      AND: {
        slug: {
          equals: null,
        },
      },
    },
    include: {
      tags: {
        include: {
          tag: true,
        },
      },
    },
  });

  console.log('question count', questions.length);

  for (const question of questions) {
    await addSlug(question);
  }

  // re run addSlugFlagToQuestion to generate the slug
  await addSlugFlagToQuestion();
};

const addSlug = async (question: Questions) => {
  const MAX_RETRIES = 5;
  let retries = 0;

  while (retries < MAX_RETRIES) {
    try {
      const slug = await generateSlug({
        ...question,
        tags:
          (question as any).tags?.map((tag: any) => ({
            id: tag.tag.uid,
            name: tag.tag.name,
          })) || [],
      });

      // Attempt to update the question with the generated slug
      await prisma.questions.update({
        where: { uid: question.uid },
        data: { slug },
      });

      console.log(`Slug "${slug}" added to question "${question.uid}".`);
      return; // Exit the loop if successful
    } catch (error: any) {
      if (error.code === 'P2002') {
        // Prisma unique constraint violation
        console.warn(`Slug conflict for question "${question.uid}". Retrying...`);
      } else {
        console.error(`Error updating question "${question.uid}": ${error.message}`);
        throw error;
      }
    }
    retries++;
  }

  console.error(`Failed to add slug to question "${question.uid}" after ${MAX_RETRIES} attempts.`);
};

const generateSlug = async (question: any): Promise<string> => {
  const apiKey = process.env.NEXT_PRIVATE_CLAUDE_API_KEY;

  const anthropic = new Anthropic({ apiKey });

  try {
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-latest',
      max_tokens: 8192,
      temperature: 0,
      messages: [
        {
          role: 'user',
          content:
            'You will be given a question, the related tags/topics and a code snippet. Create a relevant slug for the question. The slug must be short, unique, SEO-friendly, lowercase, and use dashes instead of spaces. You must only return the slug, no other text.',
        },
        {
          role: 'user',
          content:
            'You must only return the slug, no other text. Slug MUST be seo friendly and readable to users',
        },
        {
          role: 'user',
          // @ts-ignore
          content: `Question: ${question.question}\nTags: ${question.tags.map((tag) => tag.name).join(', ')}\nCode Snippet: ${question.codeSnippet}`,
        },
      ],
    });

    // @ts-ignore
    const slug = response.content[0].text;
    if (!slug) {
      throw new Error('Empty slug generated by Claude.');
    }
    return slug;
  } catch (error: any) {
    console.error(`Error generating slug: ${error.message}`);
    throw error;
  }
};
