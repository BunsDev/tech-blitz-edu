'use server';
import { prisma } from '@/lib/prisma';
import Anthropic from '@anthropic-ai/sdk';

export const addTitleToQuestion = async () => {
  const MAX_RETRIES = 5;
  let retries = 0;

  const questions = await prisma.questions.findMany({
    where: {
      title: null,
      customQuestion: false,
    },
    include: {
      tags: {
        include: {
          tag: true,
        },
      },
    },
  });

  // loop over each question and generate a title
  for (const question of questions) {
    retries = 0;
    while (retries < MAX_RETRIES) {
      try {
        const title = await generateTitle(question);
        await prisma.questions.update({
          where: { uid: question.uid },
          data: { title },
        });

        console.log(`Title "${title}" added to question "${question.uid}".`);
        break; // Break out of retry loop on success
      } catch (error: any) {
        console.error(`Error updating question "${question.uid}": ${error.message}`);
        retries++;
        if (retries === MAX_RETRIES) {
          throw error; // Only throw after all retries exhausted
        }
      }
    }
  }
};

const generateTitle = async (question: any): Promise<string> => {
  const apiKey = process.env.NEXT_PRIVATE_CLAUDE_API_KEY;
  if (!apiKey) {
    throw new Error('Claude API key not found');
  }

  const anthropic = new Anthropic({ apiKey });

  try {
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-latest',
      max_tokens: 8192,
      temperature: 0,
      messages: [
        {
          role: 'user',
          content:
            'You will be given a question, the related tags/topics and a code snippet. Create a relevant title for the question. It must be descriptive and SEO-friendly. Make it concise and to the point.',
        },
        {
          role: 'user',
          content:
            'You must only return the title, no other text. Title MUST be seo friendly and readable to users',
        },
        {
          role: 'user',
          content: `Question: ${question.question}\nTags: ${question.tags.map((tag: any) => tag.tag.name).join(', ')}\nCode Snippet: ${question.codeSnippet}`,
        },
      ],
    });

    // @ts-ignore
    const title = response.content[0].text;
    if (!title) {
      throw new Error('Empty title generated by Claude.');
    }
    return title;
  } catch (error: any) {
    console.error(`Error generating title: ${error.message}`);
    throw error;
  }
};
